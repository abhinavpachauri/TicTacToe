package  {import flash.display.MovieClip;import flash.events.MouseEvent;import flash.display.LoaderInfo;public class TicTacToe extends MovieClip {	// current player turn	private var turn:int = 0;	// which cell combinations means a win for either player	private var win:Array = new Array(new Array(1, 2, 3),																	  new Array(4, 5, 6),																	  new Array(7, 8, 9),																		new Array(1, 4, 7),																		new Array(2, 5, 8),																		new Array(3, 6, 9),																		new Array(1, 5, 9),																		new Array(3, 5, 7));	// constructor	public function TicTacToe() {			for (var i:int = 1 ; i <= 9; ++i) {			this["t" + i].addEventListener(MouseEvent.CLICK, _HandleClick);		}	}		// handles mouse click events	private function _HandleClick(e:MouseEvent) : void {		Tile(e.currentTarget).removeEventListener(MouseEvent.CLICK, _HandleClick);		var frame:int = turn % 2 == 0 ? 2 : 3;		Tile(e.currentTarget).gotoAndPlay(frame);		_EndGameOnWinOrDraw();		++turn;	}	// ends the game when one of the player wins or the game is a draw	private function _EndGameOnWinOrDraw() {		for (var i:int = 0; i < win.length; i++) {			var xwin:Boolean = true; // assume x has won			var owin:Boolean = true; // assume y has won			for (var j:int = 0; j < win[i].length; j++) {				xwin = xwin && this["t" + win[i][j]].currentFrame == 3;				owin = owin && this["t" + win[i][j]].currentFrame == 2;			}			if (xwin || owin) {                                      				_EndGame(win[i]);				return;			}		}	}		// ends the game	private function _EndGame(tiles:Array = null) : void {		for (var j:int = 1; j <= 9; ++j) {			this["t" + j].removeEventListener(MouseEvent.CLICK, _HandleClick);		}		if (tiles == null)			return;		for (var i:int = 0; i < tiles.length; ++i) {			var frame:int = this["t" + tiles[i]].currentFrame;			this["t" + tiles[i]].gotoAndPlay(frame + 2);		}	}}}